<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classStateMachine" kind="class" language="C++" prot="public">
    <compoundname>StateMachine</compoundname>
    <innerclass refid="classStateMachine_1_1State" prot="public">StateMachine::State</innerclass>
    <innerclass refid="classStateMachine_1_1StateTransition" prot="public">StateMachine::StateTransition</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classStateMachine_1a267474e7cf13747d5ac1aceabc0426c1" prot="private" static="no" mutable="no">
        <type><ref refid="classDispatcher" kindref="compound">Dispatcher</ref> &amp;</type>
        <definition>Dispatcher&amp; StateMachine::_dispatcher</definition>
        <argsstring></argsstring>
        <name>_dispatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="63" column="16" bodyfile="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classStateMachine_1a38cbdb3cb0ac47656d5bacd5ec3118b3" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classStateMachine_1_1State" kindref="compound">State</ref> &gt;</type>
        <definition>std::shared_ptr&lt;State&gt; StateMachine::_currentState</definition>
        <argsstring></argsstring>
        <name>_currentState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="64" column="21" bodyfile="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classStateMachine_1a37919894b89f2f6610314ce938d7e1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>StateMachine::StateMachine</definition>
        <argsstring>(Dispatcher &amp;dispatcher)</argsstring>
        <name>StateMachine</name>
        <param>
          <type><ref refid="classDispatcher" kindref="compound">Dispatcher</ref> &amp;</type>
          <declname>dispatcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classStateMachine_1aa129bb2783f259f99924742862282f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StateMachine::start</definition>
        <argsstring>(std::shared_ptr&lt; State &gt; &amp;initialState)</argsstring>
        <name>start</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classStateMachine_1_1State" kindref="compound">State</ref> &gt; &amp;</type>
          <declname>initialState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="55" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classStateMachine_1a3c1345313fafba21fb65fee67e7e70c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool StateMachine::isStarted</definition>
        <argsstring>() const</argsstring>
        <name>isStarted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classStateMachine_1a7b947ca5f9ccb82c0ce5625055db1fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StateMachine::update</definition>
        <argsstring>(const sf::Time deltaT)</argsstring>
        <name>update</name>
        <param>
          <type>const sf::Time</type>
          <declname>deltaT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="57" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classStateMachine_1a674f62dc822b19636c0b29d4df02dd4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StateMachine::executeTransition</definition>
        <argsstring>(const StateTransition &amp;transition)</argsstring>
        <name>executeTransition</name>
        <param>
          <type>const <ref refid="classStateMachine_1_1StateTransition" kindref="compound">StateTransition</ref> &amp;</type>
          <declname>transition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="58" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classStateMachine_1a97ef6aa0c801590cb447ca9033e60b84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDispatcher" kindref="compound">Dispatcher</ref> &amp;</type>
        <definition>Dispatcher&amp; StateMachine::getDispatcher</definition>
        <argsstring>() const</argsstring>
        <name>getDispatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="59" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classStateMachine_1a36823745cff272d5c5a1d5614c3be148" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classStateMachine_1_1State" kindref="compound">State</ref> &amp;</type>
        <definition>State&amp; StateMachine::getState</definition>
        <argsstring>() const</argsstring>
        <name>getState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="60" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classStateMachine_1aea71f53aacb20e293cb76b2860854b7d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StateMachine::setState</definition>
        <argsstring>(std::shared_ptr&lt; State &gt; &amp;state)</argsstring>
        <name>setState</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classStateMachine_1_1State" kindref="compound">State</ref> &gt; &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="66" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classStateMachine_1a2cefff95fed41933a217df00ad4c97c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StateMachine::passEventToCurrentState</definition>
        <argsstring>(const Event &amp;event)</argsstring>
        <name>passEventToCurrentState</name>
        <param>
          <type>const <ref refid="classEvent" kindref="compound">Event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="67" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" line="12" column="1" bodyfile="/home/ganymede/Coding/SimpleCppGame/build/_deps/jupiter-engine-src/include/StateMachine.hpp" bodystart="13" bodyend="68"/>
    <listofallmembers>
      <member refid="classStateMachine_1a38cbdb3cb0ac47656d5bacd5ec3118b3" prot="private" virt="non-virtual"><scope>StateMachine</scope><name>_currentState</name></member>
      <member refid="classStateMachine_1a267474e7cf13747d5ac1aceabc0426c1" prot="private" virt="non-virtual"><scope>StateMachine</scope><name>_dispatcher</name></member>
      <member refid="classStateMachine_1a674f62dc822b19636c0b29d4df02dd4c" prot="public" virt="non-virtual"><scope>StateMachine</scope><name>executeTransition</name></member>
      <member refid="classStateMachine_1a97ef6aa0c801590cb447ca9033e60b84" prot="public" virt="non-virtual"><scope>StateMachine</scope><name>getDispatcher</name></member>
      <member refid="classStateMachine_1a36823745cff272d5c5a1d5614c3be148" prot="public" virt="non-virtual"><scope>StateMachine</scope><name>getState</name></member>
      <member refid="classStateMachine_1a3c1345313fafba21fb65fee67e7e70c8" prot="public" virt="non-virtual"><scope>StateMachine</scope><name>isStarted</name></member>
      <member refid="classStateMachine_1a2cefff95fed41933a217df00ad4c97c4" prot="private" virt="non-virtual"><scope>StateMachine</scope><name>passEventToCurrentState</name></member>
      <member refid="classStateMachine_1aea71f53aacb20e293cb76b2860854b7d" prot="private" virt="non-virtual"><scope>StateMachine</scope><name>setState</name></member>
      <member refid="classStateMachine_1aa129bb2783f259f99924742862282f3f" prot="public" virt="non-virtual"><scope>StateMachine</scope><name>start</name></member>
      <member refid="classStateMachine_1a37919894b89f2f6610314ce938d7e1eb" prot="public" virt="non-virtual"><scope>StateMachine</scope><name>StateMachine</name></member>
      <member refid="classStateMachine_1a7b947ca5f9ccb82c0ce5625055db1fc3" prot="public" virt="non-virtual"><scope>StateMachine</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
